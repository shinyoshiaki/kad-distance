{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":";;AAAA,SAAgB,WAAW,CAAC,MAAc,EAAE,IAAY;IACtD,gDAAgD;IAChD,KAAK,IAAI,MAAM,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnD,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;KAC9C;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAND,kCAMC;AAED,SAAgB,YAAY,CAAC,MAAgB,EAAE,IAAY;IACzD,gDAAgD;IAChD,KAAK,IAAI,MAAM,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnD,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACpC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAND,oCAMC;AAED,SAAgB,WAAW,CACzB,MAAc,EACd,SAAiB,EACjB,UAAkB;IAElB,sDAAsD;IACtD,IAAI,WAAW,GAAG,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,EAC9C,YAAY,GAAG,EAAE,EAAE,uCAAuC;IAC1D,SAAS,EACT,GAAG,GAAG,WAAW,CAAC,MAAM,EACxB,GAAG,GAAG,CAAC,EACP,CAAC,CAAC;IACJ,OAAO,GAAG,GAAG,GAAG,EAAE;QAChB,kCAAkC;QAClC,SAAS,GAAG,CAAC,CAAC,CAAC,oBAAoB;QACnC,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC1B,8DAA8D;YAC9D,oCAAoC;YACpC,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC;YACnD,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC;YACpD,SAAS,IAAI,WAAW,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;YACzC,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE;gBACrC,GAAG,EAAE,CAAC;aACP;SACF;QACD,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC9B;IACD,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,mCAAmC;IAC3D,OAAO,YAAY,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;AAChD,CAAC;AA7BD,kCA6BC","sourcesContent":["export function parseBigInt(bigint: string, base: number) {\n  //convert bigint string to array of digit values\n  for (var values = [], i = 0; i < bigint.length; i++) {\n    values[i] = parseInt(bigint.charAt(i), base);\n  }\n  return values;\n}\n\nexport function formatBigInt(values: number[], base: number) {\n  //convert array of digit values to bigint string\n  for (var bigint = \"\", i = 0; i < values.length; i++) {\n    bigint += values[i].toString(base);\n  }\n  return bigint;\n}\n\nexport function convertBase(\n  bigint: string,\n  inputBase: number,\n  outputBase: number\n) {\n  //takes a bigint string and converts to different base\n  var inputValues = parseBigInt(bigint, inputBase),\n    outputValues = [], //output array, little-endian/lsd order\n    remainder,\n    len = inputValues.length,\n    pos = 0,\n    i;\n  while (pos < len) {\n    //while digits left in input array\n    remainder = 0; //set remainder to 0\n    for (i = pos; i < len; i++) {\n      //long integer division of input values divided by output base\n      //remainder is added to output array\n      remainder = inputValues[i] + remainder * inputBase;\n      inputValues[i] = Math.floor(remainder / outputBase);\n      remainder -= inputValues[i] * outputBase;\n      if (inputValues[i] === 0 && i === pos) {\n        pos++;\n      }\n    }\n    outputValues.push(remainder);\n  }\n  outputValues.reverse(); //transform to big-endian/msd order\n  return formatBigInt(outputValues, outputBase);\n}\n"]}