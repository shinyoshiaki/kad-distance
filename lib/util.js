"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseBigInt = parseBigInt;
exports.formatBigInt = formatBigInt;
exports.convertBase = convertBase;
function parseBigInt(bigint, base) {
  //convert bigint string to array of digit values
  for (var values = [], i = 0; i < bigint.length; i++) {
    values[i] = parseInt(bigint.charAt(i), base);
  }
  return values;
}

function formatBigInt(values, base) {
  //convert array of digit values to bigint string
  for (var bigint = "", i = 0; i < values.length; i++) {
    bigint += values[i].toString(base);
  }
  return bigint;
}

function convertBase(bigint, inputBase, outputBase) {
  //takes a bigint string and converts to different base
  var inputValues = parseBigInt(bigint, inputBase),
      outputValues = [],
      //output array, little-endian/lsd order
  remainder,
      len = inputValues.length,
      pos = 0,
      i;
  while (pos < len) {
    //while digits left in input array
    remainder = 0; //set remainder to 0
    for (i = pos; i < len; i++) {
      //long integer division of input values divided by output base
      //remainder is added to output array
      remainder = inputValues[i] + remainder * inputBase;
      inputValues[i] = Math.floor(remainder / outputBase);
      remainder -= inputValues[i] * outputBase;
      if (inputValues[i] === 0 && i === pos) {
        pos++;
      }
    }
    outputValues.push(remainder);
  }
  outputValues.reverse(); //transform to big-endian/msd order
  return formatBigInt(outputValues, outputBase);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLmpzIl0sIm5hbWVzIjpbInBhcnNlQmlnSW50IiwiZm9ybWF0QmlnSW50IiwiY29udmVydEJhc2UiLCJiaWdpbnQiLCJiYXNlIiwidmFsdWVzIiwiaSIsImxlbmd0aCIsInBhcnNlSW50IiwiY2hhckF0IiwidG9TdHJpbmciLCJpbnB1dEJhc2UiLCJvdXRwdXRCYXNlIiwiaW5wdXRWYWx1ZXMiLCJvdXRwdXRWYWx1ZXMiLCJyZW1haW5kZXIiLCJsZW4iLCJwb3MiLCJNYXRoIiwiZmxvb3IiLCJwdXNoIiwicmV2ZXJzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFBZ0JBLFcsR0FBQUEsVztRQVFBQyxZLEdBQUFBLFk7UUFRQUMsVyxHQUFBQSxXO0FBaEJULFNBQVNGLFdBQVQsQ0FBcUJHLE1BQXJCLEVBQTZCQyxJQUE3QixFQUFtQztBQUN4QztBQUNBLE9BQUssSUFBSUMsU0FBUyxFQUFiLEVBQWlCQyxJQUFJLENBQTFCLEVBQTZCQSxJQUFJSCxPQUFPSSxNQUF4QyxFQUFnREQsR0FBaEQsRUFBcUQ7QUFDbkRELFdBQU9DLENBQVAsSUFBWUUsU0FBU0wsT0FBT00sTUFBUCxDQUFjSCxDQUFkLENBQVQsRUFBMkJGLElBQTNCLENBQVo7QUFDRDtBQUNELFNBQU9DLE1BQVA7QUFDRDs7QUFFTSxTQUFTSixZQUFULENBQXNCSSxNQUF0QixFQUE4QkQsSUFBOUIsRUFBb0M7QUFDekM7QUFDQSxPQUFLLElBQUlELFNBQVMsRUFBYixFQUFpQkcsSUFBSSxDQUExQixFQUE2QkEsSUFBSUQsT0FBT0UsTUFBeEMsRUFBZ0RELEdBQWhELEVBQXFEO0FBQ25ESCxjQUFVRSxPQUFPQyxDQUFQLEVBQVVJLFFBQVYsQ0FBbUJOLElBQW5CLENBQVY7QUFDRDtBQUNELFNBQU9ELE1BQVA7QUFDRDs7QUFFTSxTQUFTRCxXQUFULENBQXFCQyxNQUFyQixFQUE2QlEsU0FBN0IsRUFBd0NDLFVBQXhDLEVBQW9EO0FBQ3pEO0FBQ0EsTUFBSUMsY0FBY2IsWUFBWUcsTUFBWixFQUFvQlEsU0FBcEIsQ0FBbEI7QUFBQSxNQUNFRyxlQUFlLEVBRGpCO0FBQUEsTUFDcUI7QUFDbkJDLFdBRkY7QUFBQSxNQUdFQyxNQUFNSCxZQUFZTixNQUhwQjtBQUFBLE1BSUVVLE1BQU0sQ0FKUjtBQUFBLE1BS0VYLENBTEY7QUFNQSxTQUFPVyxNQUFNRCxHQUFiLEVBQWtCO0FBQ2hCO0FBQ0FELGdCQUFZLENBQVosQ0FGZ0IsQ0FFRDtBQUNmLFNBQUtULElBQUlXLEdBQVQsRUFBY1gsSUFBSVUsR0FBbEIsRUFBdUJWLEdBQXZCLEVBQTRCO0FBQzFCO0FBQ0E7QUFDQVMsa0JBQVlGLFlBQVlQLENBQVosSUFBaUJTLFlBQVlKLFNBQXpDO0FBQ0FFLGtCQUFZUCxDQUFaLElBQWlCWSxLQUFLQyxLQUFMLENBQVdKLFlBQVlILFVBQXZCLENBQWpCO0FBQ0FHLG1CQUFhRixZQUFZUCxDQUFaLElBQWlCTSxVQUE5QjtBQUNBLFVBQUlDLFlBQVlQLENBQVosTUFBbUIsQ0FBbkIsSUFBd0JBLE1BQU1XLEdBQWxDLEVBQXVDO0FBQ3JDQTtBQUNEO0FBQ0Y7QUFDREgsaUJBQWFNLElBQWIsQ0FBa0JMLFNBQWxCO0FBQ0Q7QUFDREQsZUFBYU8sT0FBYixHQXZCeUQsQ0F1QmpDO0FBQ3hCLFNBQU9wQixhQUFhYSxZQUFiLEVBQTJCRixVQUEzQixDQUFQO0FBQ0QiLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZUJpZ0ludChiaWdpbnQsIGJhc2UpIHtcbiAgLy9jb252ZXJ0IGJpZ2ludCBzdHJpbmcgdG8gYXJyYXkgb2YgZGlnaXQgdmFsdWVzXG4gIGZvciAodmFyIHZhbHVlcyA9IFtdLCBpID0gMDsgaSA8IGJpZ2ludC5sZW5ndGg7IGkrKykge1xuICAgIHZhbHVlc1tpXSA9IHBhcnNlSW50KGJpZ2ludC5jaGFyQXQoaSksIGJhc2UpO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRCaWdJbnQodmFsdWVzLCBiYXNlKSB7XG4gIC8vY29udmVydCBhcnJheSBvZiBkaWdpdCB2YWx1ZXMgdG8gYmlnaW50IHN0cmluZ1xuICBmb3IgKHZhciBiaWdpbnQgPSBcIlwiLCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIGJpZ2ludCArPSB2YWx1ZXNbaV0udG9TdHJpbmcoYmFzZSk7XG4gIH1cbiAgcmV0dXJuIGJpZ2ludDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRCYXNlKGJpZ2ludCwgaW5wdXRCYXNlLCBvdXRwdXRCYXNlKSB7XG4gIC8vdGFrZXMgYSBiaWdpbnQgc3RyaW5nIGFuZCBjb252ZXJ0cyB0byBkaWZmZXJlbnQgYmFzZVxuICB2YXIgaW5wdXRWYWx1ZXMgPSBwYXJzZUJpZ0ludChiaWdpbnQsIGlucHV0QmFzZSksXG4gICAgb3V0cHV0VmFsdWVzID0gW10sIC8vb3V0cHV0IGFycmF5LCBsaXR0bGUtZW5kaWFuL2xzZCBvcmRlclxuICAgIHJlbWFpbmRlcixcbiAgICBsZW4gPSBpbnB1dFZhbHVlcy5sZW5ndGgsXG4gICAgcG9zID0gMCxcbiAgICBpO1xuICB3aGlsZSAocG9zIDwgbGVuKSB7XG4gICAgLy93aGlsZSBkaWdpdHMgbGVmdCBpbiBpbnB1dCBhcnJheVxuICAgIHJlbWFpbmRlciA9IDA7IC8vc2V0IHJlbWFpbmRlciB0byAwXG4gICAgZm9yIChpID0gcG9zOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIC8vbG9uZyBpbnRlZ2VyIGRpdmlzaW9uIG9mIGlucHV0IHZhbHVlcyBkaXZpZGVkIGJ5IG91dHB1dCBiYXNlXG4gICAgICAvL3JlbWFpbmRlciBpcyBhZGRlZCB0byBvdXRwdXQgYXJyYXlcbiAgICAgIHJlbWFpbmRlciA9IGlucHV0VmFsdWVzW2ldICsgcmVtYWluZGVyICogaW5wdXRCYXNlO1xuICAgICAgaW5wdXRWYWx1ZXNbaV0gPSBNYXRoLmZsb29yKHJlbWFpbmRlciAvIG91dHB1dEJhc2UpO1xuICAgICAgcmVtYWluZGVyIC09IGlucHV0VmFsdWVzW2ldICogb3V0cHV0QmFzZTtcbiAgICAgIGlmIChpbnB1dFZhbHVlc1tpXSA9PT0gMCAmJiBpID09PSBwb3MpIHtcbiAgICAgICAgcG9zKys7XG4gICAgICB9XG4gICAgfVxuICAgIG91dHB1dFZhbHVlcy5wdXNoKHJlbWFpbmRlcik7XG4gIH1cbiAgb3V0cHV0VmFsdWVzLnJldmVyc2UoKTsgLy90cmFuc2Zvcm0gdG8gYmlnLWVuZGlhbi9tc2Qgb3JkZXJcbiAgcmV0dXJuIGZvcm1hdEJpZ0ludChvdXRwdXRWYWx1ZXMsIG91dHB1dEJhc2UpO1xufSJdfQ==