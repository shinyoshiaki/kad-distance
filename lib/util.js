"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseBigInt = parseBigInt;
exports.formatBigInt = formatBigInt;
exports.convertBase = convertBase;

function parseBigInt(bigint, base) {
  //convert bigint string to array of digit values
  for (var values = [], i = 0; i < bigint.length; i++) {
    values[i] = parseInt(bigint.charAt(i), base);
  }

  return values;
}

function formatBigInt(values, base) {
  //convert array of digit values to bigint string
  for (var bigint = "", i = 0; i < values.length; i++) {
    bigint += values[i].toString(base);
  }

  return bigint;
}

function convertBase(bigint, inputBase, outputBase) {
  //takes a bigint string and converts to different base
  var inputValues = parseBigInt(bigint, inputBase),
      outputValues = [],
      //output array, little-endian/lsd order
  remainder,
      len = inputValues.length,
      pos = 0,
      i;

  while (pos < len) {
    //while digits left in input array
    remainder = 0; //set remainder to 0

    for (i = pos; i < len; i++) {
      //long integer division of input values divided by output base
      //remainder is added to output array
      remainder = inputValues[i] + remainder * inputBase;
      inputValues[i] = Math.floor(remainder / outputBase);
      remainder -= inputValues[i] * outputBase;

      if (inputValues[i] === 0 && i === pos) {
        pos++;
      }
    }

    outputValues.push(remainder);
  }

  outputValues.reverse(); //transform to big-endian/msd order

  return formatBigInt(outputValues, outputBase);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbInBhcnNlQmlnSW50IiwiYmlnaW50IiwiYmFzZSIsInZhbHVlcyIsImkiLCJsZW5ndGgiLCJwYXJzZUludCIsImNoYXJBdCIsImZvcm1hdEJpZ0ludCIsInRvU3RyaW5nIiwiY29udmVydEJhc2UiLCJpbnB1dEJhc2UiLCJvdXRwdXRCYXNlIiwiaW5wdXRWYWx1ZXMiLCJvdXRwdXRWYWx1ZXMiLCJyZW1haW5kZXIiLCJsZW4iLCJwb3MiLCJNYXRoIiwiZmxvb3IiLCJwdXNoIiwicmV2ZXJzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sU0FBU0EsV0FBVCxDQUFxQkMsTUFBckIsRUFBcUNDLElBQXJDLEVBQW1EO0FBQ3hEO0FBQ0EsT0FBSyxJQUFJQyxNQUFNLEdBQUcsRUFBYixFQUFpQkMsQ0FBQyxHQUFHLENBQTFCLEVBQTZCQSxDQUFDLEdBQUdILE1BQU0sQ0FBQ0ksTUFBeEMsRUFBZ0RELENBQUMsRUFBakQsRUFBcUQ7QUFDbkRELElBQUFBLE1BQU0sQ0FBQ0MsQ0FBRCxDQUFOLEdBQVlFLFFBQVEsQ0FBQ0wsTUFBTSxDQUFDTSxNQUFQLENBQWNILENBQWQsQ0FBRCxFQUFtQkYsSUFBbkIsQ0FBcEI7QUFDRDs7QUFDRCxTQUFPQyxNQUFQO0FBQ0Q7O0FBRU0sU0FBU0ssWUFBVCxDQUFzQkwsTUFBdEIsRUFBd0NELElBQXhDLEVBQXNEO0FBQzNEO0FBQ0EsT0FBSyxJQUFJRCxNQUFNLEdBQUcsRUFBYixFQUFpQkcsQ0FBQyxHQUFHLENBQTFCLEVBQTZCQSxDQUFDLEdBQUdELE1BQU0sQ0FBQ0UsTUFBeEMsRUFBZ0RELENBQUMsRUFBakQsRUFBcUQ7QUFDbkRILElBQUFBLE1BQU0sSUFBSUUsTUFBTSxDQUFDQyxDQUFELENBQU4sQ0FBVUssUUFBVixDQUFtQlAsSUFBbkIsQ0FBVjtBQUNEOztBQUNELFNBQU9ELE1BQVA7QUFDRDs7QUFFTSxTQUFTUyxXQUFULENBQ0xULE1BREssRUFFTFUsU0FGSyxFQUdMQyxVQUhLLEVBSUw7QUFDQTtBQUNBLE1BQUlDLFdBQVcsR0FBR2IsV0FBVyxDQUFDQyxNQUFELEVBQVNVLFNBQVQsQ0FBN0I7QUFBQSxNQUNFRyxZQUFZLEdBQUcsRUFEakI7QUFBQSxNQUNxQjtBQUNuQkMsRUFBQUEsU0FGRjtBQUFBLE1BR0VDLEdBQUcsR0FBR0gsV0FBVyxDQUFDUixNQUhwQjtBQUFBLE1BSUVZLEdBQUcsR0FBRyxDQUpSO0FBQUEsTUFLRWIsQ0FMRjs7QUFNQSxTQUFPYSxHQUFHLEdBQUdELEdBQWIsRUFBa0I7QUFDaEI7QUFDQUQsSUFBQUEsU0FBUyxHQUFHLENBQVosQ0FGZ0IsQ0FFRDs7QUFDZixTQUFLWCxDQUFDLEdBQUdhLEdBQVQsRUFBY2IsQ0FBQyxHQUFHWSxHQUFsQixFQUF1QlosQ0FBQyxFQUF4QixFQUE0QjtBQUMxQjtBQUNBO0FBQ0FXLE1BQUFBLFNBQVMsR0FBR0YsV0FBVyxDQUFDVCxDQUFELENBQVgsR0FBaUJXLFNBQVMsR0FBR0osU0FBekM7QUFDQUUsTUFBQUEsV0FBVyxDQUFDVCxDQUFELENBQVgsR0FBaUJjLElBQUksQ0FBQ0MsS0FBTCxDQUFXSixTQUFTLEdBQUdILFVBQXZCLENBQWpCO0FBQ0FHLE1BQUFBLFNBQVMsSUFBSUYsV0FBVyxDQUFDVCxDQUFELENBQVgsR0FBaUJRLFVBQTlCOztBQUNBLFVBQUlDLFdBQVcsQ0FBQ1QsQ0FBRCxDQUFYLEtBQW1CLENBQW5CLElBQXdCQSxDQUFDLEtBQUthLEdBQWxDLEVBQXVDO0FBQ3JDQSxRQUFBQSxHQUFHO0FBQ0o7QUFDRjs7QUFDREgsSUFBQUEsWUFBWSxDQUFDTSxJQUFiLENBQWtCTCxTQUFsQjtBQUNEOztBQUNERCxFQUFBQSxZQUFZLENBQUNPLE9BQWIsR0F2QkEsQ0F1QndCOztBQUN4QixTQUFPYixZQUFZLENBQUNNLFlBQUQsRUFBZUYsVUFBZixDQUFuQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQmlnSW50KGJpZ2ludDogc3RyaW5nLCBiYXNlOiBudW1iZXIpIHtcbiAgLy9jb252ZXJ0IGJpZ2ludCBzdHJpbmcgdG8gYXJyYXkgb2YgZGlnaXQgdmFsdWVzXG4gIGZvciAodmFyIHZhbHVlcyA9IFtdLCBpID0gMDsgaSA8IGJpZ2ludC5sZW5ndGg7IGkrKykge1xuICAgIHZhbHVlc1tpXSA9IHBhcnNlSW50KGJpZ2ludC5jaGFyQXQoaSksIGJhc2UpO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRCaWdJbnQodmFsdWVzOiBudW1iZXJbXSwgYmFzZTogbnVtYmVyKSB7XG4gIC8vY29udmVydCBhcnJheSBvZiBkaWdpdCB2YWx1ZXMgdG8gYmlnaW50IHN0cmluZ1xuICBmb3IgKHZhciBiaWdpbnQgPSBcIlwiLCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIGJpZ2ludCArPSB2YWx1ZXNbaV0udG9TdHJpbmcoYmFzZSk7XG4gIH1cbiAgcmV0dXJuIGJpZ2ludDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRCYXNlKFxuICBiaWdpbnQ6IHN0cmluZyxcbiAgaW5wdXRCYXNlOiBudW1iZXIsXG4gIG91dHB1dEJhc2U6IG51bWJlclxuKSB7XG4gIC8vdGFrZXMgYSBiaWdpbnQgc3RyaW5nIGFuZCBjb252ZXJ0cyB0byBkaWZmZXJlbnQgYmFzZVxuICB2YXIgaW5wdXRWYWx1ZXMgPSBwYXJzZUJpZ0ludChiaWdpbnQsIGlucHV0QmFzZSksXG4gICAgb3V0cHV0VmFsdWVzID0gW10sIC8vb3V0cHV0IGFycmF5LCBsaXR0bGUtZW5kaWFuL2xzZCBvcmRlclxuICAgIHJlbWFpbmRlcixcbiAgICBsZW4gPSBpbnB1dFZhbHVlcy5sZW5ndGgsXG4gICAgcG9zID0gMCxcbiAgICBpO1xuICB3aGlsZSAocG9zIDwgbGVuKSB7XG4gICAgLy93aGlsZSBkaWdpdHMgbGVmdCBpbiBpbnB1dCBhcnJheVxuICAgIHJlbWFpbmRlciA9IDA7IC8vc2V0IHJlbWFpbmRlciB0byAwXG4gICAgZm9yIChpID0gcG9zOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIC8vbG9uZyBpbnRlZ2VyIGRpdmlzaW9uIG9mIGlucHV0IHZhbHVlcyBkaXZpZGVkIGJ5IG91dHB1dCBiYXNlXG4gICAgICAvL3JlbWFpbmRlciBpcyBhZGRlZCB0byBvdXRwdXQgYXJyYXlcbiAgICAgIHJlbWFpbmRlciA9IGlucHV0VmFsdWVzW2ldICsgcmVtYWluZGVyICogaW5wdXRCYXNlO1xuICAgICAgaW5wdXRWYWx1ZXNbaV0gPSBNYXRoLmZsb29yKHJlbWFpbmRlciAvIG91dHB1dEJhc2UpO1xuICAgICAgcmVtYWluZGVyIC09IGlucHV0VmFsdWVzW2ldICogb3V0cHV0QmFzZTtcbiAgICAgIGlmIChpbnB1dFZhbHVlc1tpXSA9PT0gMCAmJiBpID09PSBwb3MpIHtcbiAgICAgICAgcG9zKys7XG4gICAgICB9XG4gICAgfVxuICAgIG91dHB1dFZhbHVlcy5wdXNoKHJlbWFpbmRlcik7XG4gIH1cbiAgb3V0cHV0VmFsdWVzLnJldmVyc2UoKTsgLy90cmFuc2Zvcm0gdG8gYmlnLWVuZGlhbi9tc2Qgb3JkZXJcbiAgcmV0dXJuIGZvcm1hdEJpZ0ludChvdXRwdXRWYWx1ZXMsIG91dHB1dEJhc2UpO1xufVxuIl19